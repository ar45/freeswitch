// Based on original code from https://github.com/joegen/oss_core
// Original work is done by Joegen Baclor and hereby allows use of this code 
// to be republished as part of the freeswitch project under 
// MOZILLA PUBLIC LICENSE Version 1.1 and above.


#ifndef TELNYX_EXEC_MANAGED_DAEMON_RUNNER_H_INCLUDED
#define	TELNYX_EXEC_MANAGED_DAEMON_RUNNER_H_INCLUDED


#include "Telnyx/Exec/Process.h"
#include "Telnyx/UTL/IPCQueue.h"
#include "Telnyx/Exec/ManagedDaemon.h"

namespace Telnyx {
namespace Exec {
  
class ManagedDaemonRunner : IPCJsonBidirectionalQueue
{
  /// Description:  This class is used to manage a daemon and run it as a forked
  ///   process within the parent application.  A daemon must implement the IPCJsonBidirectionQueue 
  ///   IPC call backs for it to properly communicate state to the manager. If the daemon 
  ///   dies unexpectedly, the manager will attempt to restart it.  The variable _maxRestart is used
  ///   to determine how many times the manager would attempt to restart the process
  ///   before bailing out.
  ///
public:
 
 
  ManagedDaemonRunner(const std::string& executablePath, 
                const std::string& alias,
                const std::string& runDirectory,
                const std::string& startupScript,
                const std::string& shutdownScript,
                const std::string& pidFile,
                int maxRestart);
  /// Constructor
  /// Parameters:
  ///  - executablePath : The absolute path for the executable
  ///  - alias : The name to be used for the soft link as well as the ipc queue prefix
  ///  - runDirectory : The place where pid file, soft link and IPC queue file will be stored.
  ///    The application MUST have write access to the runDirectory
  ///  - startupScript :  The command or script to be executed to run the daemon
  ///  - shutdownScript:  The command or script to be executed to stop the daemon
  ///  - pidFile: The path to the pid file generated by the daemon
  ///  - maxRestart:  Maximum number of consecutive restart before backing off
  
  virtual ~ManagedDaemonRunner();
  /// Destructor
  
  bool isAlive() const;
  /// Description: Checks if process is alive
  /// Returns:
  ///  true : Process is running
  ///  false : Process is dead
  
  pid_t getProcessId() const;
  /// Description: Get the PID of the running process
  /// Returns:
  ///   - None Zero positive integer if the process is running
  ///   - (-1) if process is not running
  
  bool readMessage(std::string& message, bool blocking = true);
  /// Description: Read an IPC message from the daemon message queue
  /// Parameters:
  ///   - message : Bytes received
  ///   - blocking : If set to true, the function will block until the next 
  ///     IPC message is received.  If false, the function will return right away.
  ///     The default value is blocking.
  /// Returns:
  ///   - false : If there are no message in the queue
  ///   - true : If an IPC message has been read
  
  bool start();
  /// Description: Starts the running process.
  /// Returns:
  ///   - true : Successful operation
  ///   - false : Unable to start the process 
  
  bool stop();
  /// Description: Stops the running process.  Sends a SIGTERM first then 
  ///   sends a SIGKILL if the process lingers
  /// Returns:
  ///   - true : Successful operation
  ///   - false : Unable to stop the running process
  
  bool shutdown();
  /// Description:  Like stop() except that this function used the shutdown 
  ///   script to terminate the process then sends a SIGKILL if the process lingers.
  /// Returns:
  ///   - true : Successful operation
  ///   - false : Unable to stop the running process
  
  bool restart();
  /// Description:  Restarts a running process.  This is equivalent to calling stop() followed by a start()
  /// Returns:
  ///   - true : Successful operation
  ///   - false : Unable to start the process 
  /// Note: If process is not running, operation is similar to start()
  
  virtual void onReceivedIPCMessage(const json::Object& params);
  /// Description:  Handler for new IPC messages from the monitored process
  /// Parameters:
  ///   - params : JSON object encapsulating IPC data from monitored process
  /// Note: The default behavior does nothing.  This is meant to be implemented
  ///       by the subclass
  
  const std::string& getAlias() const;
  /// Description: Get the alias of the process
  /// Returns: 
  ///   - alias : The name to be used for the soft link as well as the IPC queue prefix
  
  const std::string& getPath() const;
  /// Description: Get the path to the executable
  /// Returns:
  ///   - path : Absolute path of the executable file
  
  const std::string& getRunDirectory() const;
  /// Description: Get the path of the run directory
  /// Returns:
  ///   - runDirectory : Absolute path of the run directory
  
  virtual Process::Action onDeadProcess(int consecutiveCount);
  /// Description: Handler called when the daemon dies unexpectedly.
  /// Parameters:
  ///   - consecutiveCount : Number of consecutive times the process died and restarted
  /// Returns: 
  ///  - Process::ProcessRestart (default) : Restart the process
  ///  - Process::ProcessBackoff : Do not restart the process right away until the back off time has lapsed
  ///  - Process::ProcessUnmonitor : Stop monitoring the process
 
  
protected:
  std::string _path; /// The path to the executable
  std::string _alias; /// The name to be used for the soft link as well as the IPC queue prefix
  std::string _runDirectory;  /// The run directory where PID file IPC queue files are located
  int _maxRestart; /// Maximum number of consecutive restart before backing off
  Process* _pProcess; /// The process object
};

//
// Inlines
//
  
inline const std::string& ManagedDaemonRunner::getAlias() const
{
  return _alias;
}

inline const std::string& ManagedDaemonRunner::getPath() const
{
  return _path;
}

inline const std::string& ManagedDaemonRunner::getRunDirectory() const
{
  return _runDirectory;
}

inline bool ManagedDaemonRunner::isAlive() const
{
  TELNYX_ASSERT(_pProcess);
  return _pProcess->isAlive();
}

inline pid_t ManagedDaemonRunner::getProcessId() const
{
  return Process::getProcessId(_alias);
}

inline bool ManagedDaemonRunner::shutdown()
{
  TELNYX_ASSERT(_pProcess);
  return _pProcess->shutDown(SIGKILL);
}

} } // Telnyx::Exec

#endif // TELNYX_EXEC_MANAGED_DAEMON_RUNNER_H_INCLUDED
